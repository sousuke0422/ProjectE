buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = "${projecte_version}"
group= "java.moze_intel" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "FMProjectE"

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "eclipse"

    replace "@VERSION@", project.version
    replaceIn "PECore.java"
}

repositories {
    maven { //Waila Repo
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { //NEI Repo
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name 'Chisel'
        url "http://maven.tterrag.com/"
    }
    ivy {
        name "MineTweaker3"
        artifactPattern "http://minetweaker3.powerofbytes.com/download/[module]-([classifier]-)[revision].[ext]"
    }
}
 
dependencies {
    //testCompile group: 'junit', name: 'junit', version:'4.11'

    compile "com.cricketcraft.chisel:Chisel2:2.5.0.2:api"
	
    compile "codechicken:CodeChickenCore:1.7.10-1.0.4.29:dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.1.110:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.4.83:dev"

    compile name: 'MineTweaker3', version: 'Dev-1.7.10-3.0.9C', ext: 'jar'

    dependencies { compile fileTree(dir: 'lib', include: '*.jar') }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Dev jar (deobfuscated)
task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    version = "${project.version}"
}

artifacts {
    archives devJar
}

idea.module.inheritOutputDirs = true